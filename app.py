import customtkinter as ctk
import tkinter as tk
import json
import logging

from threading import Thread, Event
from threading import enumerate as enum_threads
from sv_ttk import get_theme, set_theme
from pywinstyles import change_header_color, apply_style
from sys import getwindowsversion
from requests import patch
from os import remove, rmdir, path, getenv, mkdir, getcwd
from time import sleep, localtime
from base64 import b64decode
from logging.handlers import RotatingFileHandler
from io import BytesIO
from pypresence import Presence
from CTkMessagebox import CTkMessagebox
from tkinter import ttk
from PIL import ImageTk, Image
from pystray import MenuItem as item
from pystray import Icon

logger = logging.getLogger(__name__)
logging.basicConfig(filename=path.join(getenv('APPDATA'), "discustom", "discustom.log"), level=logging.INFO)
handler = RotatingFileHandler(path.join(getenv('APPDATA'), "discustom", "discustom.log"), maxBytes=1_000_000, backupCount=2)
time_data = localtime()
logger.info(f"{time_data.tm_mday}/{time_data.tm_mon}/{time_data.tm_year} : {time_data.tm_hour}-{time_data.tm_min}:{time_data.tm_sec}")

def b64_to_pil_image(b64_image_data: str) -> Image.Image:
  image_data = b64decode(b64_image_data)
  return Image.open(BytesIO(image_data))

def b64_to_image(b64_image_data: str, is_tab_image: bool = False) -> ImageTk.PhotoImage:
 image_data = b64decode(b64_image_data)
 image_bytes = Image.open(BytesIO(image_data))
 if is_tab_image: 
  image_bytes = image_bytes.resize((30, 30))

 return (ImageTk.PhotoImage(image_bytes))

def b64_to_ctkimage(b64_image_data: str) -> ctk.CTkImage:
 image_data = b64decode(b64_image_data)
 image_bytes = Image.open(BytesIO(image_data))

 return ctk.CTkImage(light_image=image_bytes, size=(10, 10))

icon_image_b64 = """"""
add_image_b64 = """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"""
remove_image_b64 = """"""
home_image_b64 = """"""
presence_image_b64 = """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"""
save_image_b64 = """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"""
settings_image_b64 = """"""
status_image_b64 = """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"""

class fs:
 def __init__(self):
  logger.info("starting file system")

  self.appdata_file_path = path.join(getenv('APPDATA'), "discustom")
  self.data_file_path = path.join(getenv('APPDATA'), "discustom", "data")
  self.settings_file_path = path.join(self.data_file_path, 'settings.json')
  self.status_file_path = path.join(self.data_file_path, 'status.json')
  self.presence_file_path = path.join(self.data_file_path, 'presence.json')
  self.startup_path = path.join(getenv('APPDATA'), 'Microsoft', 'Windows', 'Start Menu', 'Programs', 'Startup')

  if not self.check_appdata():
   self.create_appdata_folder()

 def check_appdata(self):
  return path.exists(self.appdata_file_path)
 
 def create_appdata_folder(self):
  mkdir(self.appdata_file_path)
  mkdir(self.data_file_path)

 def remove_appdata_folder(self):
  rmdir(self.data_file_path)
  rmdir(self.appdata_file_path) # I don't if I will ever use it

 def save_presence(self, presence_data):
  with open(self.presence_file_path, 'w') as file:
   json.dump(presence_data, file, indent=1)

 def save_config(self, config_data):
  with open(self.settings_file_path, 'w') as file:
   json.dump(config_data, file, indent=1)

 def save_status(self, status_data):
  with open(self.status_file_path, 'w') as file:
   json.dump(status_data, file, indent=1)

 def load_presence(self):
  try:
   with open(self.presence_file_path, 'r') as file:
    return json.load(file)
  except FileNotFoundError:
   default_data = { "enabled": False, "data": { "state": "Using Discustom", "details": "made by @nero", "large_image": "https://i.redd.it/tioihi08gd5f1.jpeg", "large_image_text": ":D", "small_image": "https://i.redd.it/tioihi08gd5f1.jpeg", "small_image_text": ":(" }}
   with open(self.presence_file_path, 'x') as file:
    json.dump(default_data, file, indent=1)
   
   return default_data

 def load_config(self):
  try:
   with open(self.settings_file_path, 'r') as file:
    return json.load(file)
  except FileNotFoundError:
   default_data = { "client_token": "", "client_id": "", "time_cycle": 60, "on_start_up": False, "start_minimized": False }
   with open(self.settings_file_path, 'x') as file:
    json.dump(default_data, file, indent=1)
   
   return default_data

 def add_to_startup(self):
  file_path = getcwd() + '\\discustom.exe'
  shortcut_path = path.join(self.startup_path, 'discustom.lnk')

  try:
    from pythoncom import IID_IPersistFile, CoCreateInstance, CLSCTX_INPROC_SERVER
    from win32com import shell

    shell_link = CoCreateInstance(
      shell.CLSID_ShellLink, None,
      CLSCTX_INPROC_SERVER, shell.IID_IShellLink
    )
    shell_link.SetPath(file_path)
    shell_link.SetDescription('Start Discustom')
    shell_link.SetWorkingDirectory(path.dirname(file_path))
    persist_file = shell_link.QueryInterface(IID_IPersistFile)
    persist_file.Save(shortcut_path, 0)
    logger.info(f"Shortcut created at {shortcut_path}")
  except ImportError:
    logger.error("pywin32 is required to create shortcut. You can install it with 'pip install pywin32'")

 def remove_from_startup(self):
  logger.info(f"Startup path: {self.startup_path}")
  shortcut_path = path.join(self.startup_path, 'discustom.lnk')

  try:
    if path.exists(shortcut_path):
      remove(shortcut_path)
      print(f"Shortcut removed from {shortcut_path}")
    else:
      print("No startup shortcut found.")
  except Exception as e:
    print(f"Error removing shortcut: {e}")

 def check_startup(self):
  shortcut_path = path.join(self.startup_path, 'discustom.lnk')
  return path.exists(shortcut_path)

 def load_status(self):
  try:
   with open(self.status_file_path, 'r') as file:
    return json.load(file)
  except FileNotFoundError:
   with open(self.status_file_path, 'x') as file:
    json.dump({ "enabled": False, "statuses": [] }, file, indent=1)
   
   return { "enabled": False, "statuses": [] }

 def settings_path(self):
  return self.settings_file_path
 
 def presence_path(self):
  return self.presence_file_path
 
 def status_path(self):
  return self.status_file_path
   
FS = fs()

class App():
 def __init__(self):
  logger.info("starting gui")

  self.root = tk.Tk()
  self.root.geometry("600x320")
  self.root.title('Discustom v1.34 by @nero')
  self.root.resizable(False, False)

  self.presence_enabled = False
  self.status_enabled = False

  self.presence_manager = presence_manager()
  self.status_manager = status_manager()

  self.config_data = FS.load_config()
  self.status_data = FS.load_status()
  self.presence_data = FS.load_presence()

  self.icon_path = b64_to_image(icon_image_b64)
  self.root.iconphoto(False, self.icon_path)

  self.root.protocol("WM_DELETE_WINDOW", self.minimise)
  if self.config_data['start_minimized'] == True:
   self.minimise()

  self.tab_frame = ttk.Frame(self.root, width=100)
  self.tab_frame.pack(
   side='left',
   fill='y'
  )

  self.content_frame = ttk.Frame(self.root)
  self.content_frame.pack(
   side='right',
   fill='both',
   expand=True
  )

  home_image = b64_to_image(home_image_b64, True)
  presence_image = b64_to_image(presence_image_b64, True)
  status_image = b64_to_image(status_image_b64, True)
  settings_image = b64_to_image(settings_image_b64, True)

  self.icons = [
   { "image": home_image, "label": "Home" },
   { "image": presence_image, "label": "Presence" },
   { "image": status_image, "label": "Status" },
   { "image": settings_image, "label": "Settings" }
  ]

  self.cur_status_msg = "Loading.."

  self.remove_image = b64_to_ctkimage(remove_image_b64)
  self.add_image = b64_to_ctkimage(add_image_b64)
  self.save_image = b64_to_ctkimage(save_image_b64)

  self.tabs = []
  for i, icon in enumerate(self.icons):
   appendable_btn = ttk.Button(self.tab_frame, image=icon['image'], text=icon['label'], compound='left', command=lambda i=i: self.show_tab(i), width=10)
   appendable_btn.pack(pady=15, anchor='w')

   ttk.Separator(self.tab_frame, orient='horizontal').pack(fill='x', padx=5, pady=(5, 5))
   self.tabs.append(appendable_btn)

  self.tab_contents = [
   self.main_page,
   self.presence_page,
   self.status_page,
   self.settings_page
  ]

  self.activity_types = {
   "Playing": 0,
   "Listening": 2,
   "Watching": 3,
   "Competing": 5
  }

  self.show_tab(0)

  set_theme('dark', self.root)

  self.apply_theme_to_titlebar()

 def refresh_status_msg(self):
  self.cur_status_msg = self.status_manager.cur_line
  logger.info(f'status has been set to {self.cur_status_msg}')
  self.status_msg.configure(text=f"Status Message - {self.cur_status_msg}")
  self.status_msg.after((self.config_data['time_cycle'] * 1000) + 150, lambda: self.refresh_status_msg())

 def apply_theme_to_titlebar(self):
  version = getwindowsversion()

  if version.major == 10 and version.build >= 22000:
   change_header_color(self.root, "#1c1c1c" if get_theme() == "dark" else "#fafafa")
  elif version.major == 10:
   apply_style(self.root, "dark" if get_theme() == "dark" else "normal")

   self.root.wm_attributes("-alpha", 0.99)
   self.root.wm_attributes("-alpha", 1)

 def show_tab(self, index):
  for widget in self.content_frame.winfo_children():
    widget.pack_forget()

  self.tab_contents[index]()

 def bring_to_front(self):
  self.root.deiconify()
  self.root.lift()
  self.root.attributes('-topmost', True)
  self.root.after(0, lambda: self.root.attributes('-topmost', False))

 def open_window(self):
  self.icon.stop()
  self.root.after(10, self.bring_to_front())

 def close(self):
  if self.icon:
    self.icon.stop()

  self.status_manager.stop_all_threads()
  self.presence_manager.stop_all_threads()

  logger.info('closing.')

  sleep(2)

  for thread in enum_threads():
   if thread.name != "MainThread":
    thread.join(timeout=1)

  self.root.destroy()

 def minimise(self):
  self.root.withdraw()
  self.image = b64_to_pil_image(icon_image_b64)
  self.menu = (item('Open', self.open_window), item('Exit', self.close))
  self.icon = Icon("discustom", self.image, "discustom", self.menu)
  self.icon.run()

 def main_page(self):
  main_frame = ctk.CTkScrollableFrame(self.content_frame, label_anchor='w', label_text='Home', width=450, height=300)
  main_frame.pack(padx=5, pady=3)

  ctk.CTkLabel(main_frame, text="You're actually stupid, James", font=('Verdana', 9)).pack(padx=5, pady=2, anchor='w')
  ctk.CTkLabel(main_frame, text="I was going todo more but I don't know what to put", font=('Verdana', 9)).pack(padx=5, pady=2, anchor='w')
  
  self.separator(main_frame)

  if self.status_data['enabled']:
    # ctk.CTkLabel(main_frame, text="Status Message", font=('Verdana', 9)).pack(padx=5, pady=2, anchor='w')
    self.status_msg = ctk.CTkLabel(main_frame, text=f"Status Message - {self.cur_status_msg}", font=('Verdana', 11))
    self.status_msg.pack(padx=5, pady=2, anchor='w')
    self.status_msg.after(400, lambda: self.refresh_status_msg())

 def presence_page(self):
  self.presence_data = FS.load_presence()

  #### frame
  scroll_frame = ctk.CTkScrollableFrame(self.content_frame, label_anchor='w', label_text='Presence', width=450, height=300)
  scroll_frame.pack(padx=5, pady=3)

  # don't ask, i can't be bothered to change them all
  self.scroll_frame = scroll_frame

  self.pre_enabled_var = ctk.BooleanVar(self.root, value=self.presence_data['enabled'])
  self.pre_enabled = ctk.CTkCheckBox(scroll_frame, width=20, text="Enable Presence", variable=self.pre_enabled_var, command=self.toggle_presence, offvalue=False, onvalue=True)
  self.pre_enabled.pack(padx=5, pady=10, anchor='w')

  self.separator(scroll_frame)

  ctk.CTkLabel(scroll_frame, text="Activity Type", font=('Verdana', 11)).pack(padx=5, pady=(5, 2), anchor='w')
  self.activity_type_var = ctk.StringVar(scroll_frame, value=[k for k, v in self.activity_types.items() if v == self.presence_data['data']['activity_type']][0])
  self.activity_type = ctk.CTkComboBox(scroll_frame, width=400, values=list(self.activity_types.keys()), corner_radius=10, variable=self.activity_type_var)
  self.activity_type.pack(padx=5, pady=2, anchor='w')

  tooltip(self.activity_type, "Choose what type of activity you are doing.")

  ctk.CTkLabel(scroll_frame, text="State", font=('Verdana', 11)).pack(padx=5, pady=(5, 2), anchor='w')
  self.state_var = tk.StringVar(scroll_frame, value=self.presence_data['data']['state'])
  self.state_entry = ctk.CTkEntry(scroll_frame, width=400, textvariable=self.state_var)
  self.state_entry.pack(padx=5, pady=2, anchor='w')

  tooltip(self.state_entry, "The text just above the time amount.")

  ctk.CTkLabel(scroll_frame, text="Details", font=('Verdana', 11)).pack(padx=5, pady=(5, 2), anchor='w')
  self.details_var = tk.StringVar(scroll_frame, value=self.presence_data['data']['details'])
  self.details_entry = ctk.CTkEntry(scroll_frame, width=400, textvariable=self.details_var)
  self.details_entry.pack(padx=5, pady=2, anchor='w')

  tooltip(self.details_entry, "The text just below the App name")

  ctk.CTkLabel(scroll_frame, text="Large Image", font=('Verdana', 11)).pack(padx=5, pady=(5, 2), anchor='w')
  self.large_img_var = tk.StringVar(scroll_frame, value=self.presence_data['data']['large_image'])
  self.large_img_entry = ctk.CTkEntry(scroll_frame, width=400, textvariable=self.large_img_var)
  self.large_img_entry.pack(padx=5, pady=2, anchor='w')

  tooltip(self.large_img_entry, "Well, I mean it's kinda obvious")

  ctk.CTkLabel(scroll_frame, text="Large Image Text", font=('Verdana', 11)).pack(padx=5, pady=(5, 2), anchor='w')
  self.large_img_text_var = tk.StringVar(scroll_frame, value=self.presence_data['data']['large_image_text'])
  self.large_img_text_entry = ctk.CTkEntry(scroll_frame, width=400, textvariable=self.large_img_text_var)
  self.large_img_text_entry.pack(padx=5, pady=2, anchor='w')

  tooltip(self.large_img_text_entry, "The text that shows when you hover over the image, kinda like this.")

  ctk.CTkLabel(scroll_frame, text="Small Image", font=('Verdana', 11)).pack(padx=5, pady=(5, 2), anchor='w')
  self.small_img_var = tk.StringVar(scroll_frame, value=self.presence_data['data']['small_image'])
  self.small_img_entry = ctk.CTkEntry(scroll_frame, width=400, textvariable=self.small_img_var)
  self.small_img_entry.pack(padx=5, pady=2, anchor='w')

  tooltip(self.small_img_entry, "the url of the small image you want.")

  ctk.CTkLabel(scroll_frame, text="Small Image Text", font=('Verdana', 11)).pack(padx=5, pady=(5, 2), anchor='w')
  self.small_img_text_var = tk.StringVar(scroll_frame, value=self.presence_data['data']['small_image_text'])
  self.small_img_text_entry = ctk.CTkEntry(scroll_frame, width=400, textvariable=self.small_img_text_var)
  self.small_img_text_entry.pack(padx=5, pady=(2, 10), anchor='w')

  tooltip(self.small_img_text_entry, "The text that shows when you hover over the small image.")

  self.separator(scroll_frame)
  
  ctk.CTkButton(scroll_frame, width=200, image=self.save_image, compound='left', text="Save Presence", command=self.save_presence_data).pack(pady=(15, 15), anchor='center')

 def status_page(self):
  self.status_data = FS.load_status()

  status_frame = ctk.CTkScrollableFrame(self.content_frame, label_anchor='w', label_text='Status', width=450, height=300)
  status_frame.pack(padx=5, pady=2)

  self.sta_enabled_var = ctk.BooleanVar(self.root, value=self.status_data['enabled'])
  self.sta_enabled = ctk.CTkCheckBox(status_frame, width=20, text="Enable Status", variable=self.sta_enabled_var, command=self.toggle_status, offvalue=False, onvalue=True)
  self.sta_enabled.pack(padx=5, pady=10, anchor='w')

  tooltip(self.sta_enabled, "Need I say less.")

  self.separator(status_frame)

  ctk.CTkLabel(status_frame, text="Status Message", font=('Verdana', 9)).pack(padx=5, pady=(5, 2), anchor='w')
  self.status_msg_var = tk.StringVar(status_frame)
  self.status_entry = ctk.CTkEntry(status_frame, width=400, textvariable=self.status_msg_var)
  self.status_entry.pack(padx=5, pady=2, anchor='w')

  tooltip(self.status_entry, "the message that shows on the status")

  ctk.CTkLabel(status_frame, text="Emoji Name", font=('Verdana', 9)).pack(padx=5, pady=(5, 2), anchor='w')
  self.emoji_name_var = tk.StringVar(status_frame)
  self.emoji_name_entry = ctk.CTkEntry(status_frame, width=400, textvariable=self.emoji_name_var)
  self.emoji_name_entry.pack(padx=5, pady=2, anchor='w')

  tooltip(self.emoji_name_entry, "the emoji name")

  ctk.CTkLabel(status_frame, text="Emoji ID", font=('Verdana', 9)).pack(padx=5, pady=(5, 2), anchor='w')
  self.emoji_id_var = tk.StringVar(status_frame)
  self.emoji_id_entry = ctk.CTkEntry(status_frame, width=400, textvariable=self.emoji_id_var)
  self.emoji_id_entry.pack(padx=5, pady=2, anchor='w')

  tooltip(self.emoji_id_entry, "the id of the emoji")
  
  ctk.CTkButton(status_frame, width=200, image=self.add_image, compound='left', text="Add Status", command=self.pass_to_status_manager).pack(pady=(15, 15), anchor='center')

  self.separator(status_frame)

  self.remove_combo = ctk.CTkComboBox(status_frame, values=[status['msg'] for status in self.status_manager.status_lines['statuses']], width=450, state="readonly")
  self.remove_combo.pack(padx=5, pady=25, anchor='w')

  ctk.CTkButton(status_frame, width=200, image=self.remove_image, compound='left', text="Remove Status", command=self.remove_pass_to_status_manager).pack(pady=(15, 15), anchor='center')

 def settings_page(self):
  self.config_data = FS.load_config()

  settings_frame = ctk.CTkScrollableFrame(self.content_frame, label_anchor='w', label_text='Settings', width=450, height=300)
  settings_frame.pack(padx=5, pady=2)

  ctk.CTkLabel(settings_frame, text="Client ID", font=('Verdana', 9)).pack(padx=5, pady=(5, 2), anchor='w')
  self.client_id_var = tk.StringVar(settings_frame, value=self.config_data['client_id'])
  self.client_id_entry = ctk.CTkEntry(settings_frame, width=400, textvariable=self.client_id_var)
  self.client_id_entry.pack(padx=5, pady=2, anchor='w')

  self.separator(settings_frame)

  ctk.CTkLabel(settings_frame, text="Token", font=('Verdana', 9)).pack(padx=5, pady=2, anchor='w')
  self.token_var = tk.StringVar(settings_frame, value=self.config_data['client_token'])
  self.token_entry = ctk.CTkEntry(settings_frame, width=400, textvariable=self.token_var, show="*")
  self.token_entry.pack(padx=5, pady=2, anchor='w')

  tooltip(self.token_entry, 'Discord Token, this is locally stored and not consumed anywhere else.')

  ctk.CTkLabel(settings_frame, text="Time cycle", font=('Verdana', 9)).pack(padx=5, pady=2, anchor='w')
  self.time_cycle_var = tk.IntVar(settings_frame, value=self.config_data['time_cycle'])
  self.time_cycle_entry = ctk.CTkEntry(settings_frame, width=400, textvariable=self.time_cycle_var)
  self.time_cycle_entry.pack(padx=5, pady=2, anchor='w')

  tooltip(self.time_cycle_entry, 'Time for each status line.')

  self.separator(settings_frame)

  self.on_start_var = ctk.BooleanVar(settings_frame, value=self.config_data['on_startup'])
  self.on_minimized_var = ctk.BooleanVar(settings_frame, value=self.config_data['start_minimized'])

  self.on_start_box = ctk.CTkCheckBox(settings_frame, width=20, text="Run on Startup", variable=self.on_start_var, offvalue=False, onvalue=True)
  self.on_minimized = ctk.CTkCheckBox(settings_frame, width=20, text="Start Minimized", variable=self.on_minimized_var, offvalue=False, onvalue=True)

  self.on_start_box.pack(padx=5, pady=(8, 8), anchor='w')
  self.on_minimized.pack(padx=5, pady=(8, 8), anchor='w')

  ctk.CTkButton(settings_frame, width=200, image=self.save_image, compound='left', text="Save Settings", command=self.save_config_data).pack(pady=(15, 15), anchor='center')

 def separator(self, frame):
  ttk.Separator(frame, orient='horizontal').pack(fill='x', padx=5, pady=(5, 5))

 def pass_to_status_manager(self):
  self.status_manager.add_status(self.root, self.remove_combo, self.status_msg_var, self.emoji_id_var, self.emoji_name_var)

 def remove_pass_to_status_manager(self):
  self.status_manager.remove_status(self.root, self.remove_combo)

 def save_presence_data(self):
  activity_type = self.activity_types[self.activity_type.get()]
  state = self.state_var.get()
  details = self.details_var.get()
  large_image = self.large_img_var.get()
  large_text = self.large_img_text_var.get()
  small_image = self.small_img_var.get()
  small_text = self.small_img_text_var.get()

  if large_image == "" or small_image == "":
   CTkMessagebox(self.scroll_frame, message="You need to ensure image fields are filled.", icon='cancel')
   return
  
  if state == "" and details == "":
   CTkMessagebox(self.scroll_frame, message="You need to have either State or Details entry filled.", icon='cancel')
   return

  save_presence_data = {  
   "enabled": self.pre_enabled_var.get(),
   "data": {
    "activity_type": activity_type,
    "state": state,
    "details": details,
    "large_image": large_image,
    "large_image_text": large_text,
    "small_image": small_image, 
    "small_image_text": small_text
   }
  }

  FS.save_presence(save_presence_data)

 def save_config_data(self):
  save_data = {
   "client_token": self.token_var.get(),
   "client_id": self.client_id_var.get(),
   "time_cycle": self.time_cycle_var.get(),
   "on_startup": self.on_start_var.get(),
   "start_minimized": self.on_minimized_var.get()
  }

  if self.on_start_var.get():
    if not FS.check_startup():
     FS.add_to_startup()
  else:
   if FS.check_startup():
    FS.remove_from_startup()

  FS.save_config(save_data)

 def toggle_status(self):
  self.status_data['enabled'] = self.sta_enabled_var.get()
  FS.save_status(self.status_data)

 def toggle_presence(self):
  self.presence_data['enabled'] = self.pre_enabled_var.get()
  FS.save_presence(self.presence_data)

class tooltip():
 def __init__(self, widget: any, text: str):
  self.widget = widget
  self.text = text
  self.tooltip_window = None

  self.widget.bind('<Enter>', self.show_tooltip)
  self.widget.bind('<Leave>', self.hide_tooltip)

 def show_tooltip(self, event=None):
  if self.tooltip_window or not self.text:
   return
  
  x, y, cx, cy = self.widget.bbox("insert") or (0, 0, 0, 0)
  x += self.widget.winfo_rootx() + 25
  y += self.widget.winfo_rooty() + 20

  self.tooltip_window = tw = tk.Toplevel(self.widget)
  tw.wm_overrideredirect(True)
  tw.wm_geometry(f"+{x}+{y}")
  tw.attributes("-alpha", 0.7)

  label = ctk.CTkLabel(
   tw,
   text=self.text,
   corner_radius=20,
   bg_color="black",
   font=("Segoe UI", 12)
  )
  label.pack(ipadx=5, ipady=2)

 def hide_tooltip(self, event=None):
  if self.tooltip_window:
   self.tooltip_window.destroy()
   self.tooltip_window = None

class presence_manager:
 def __init__(self):
  logger.info('starting presence manager')
  self.config_data = FS.load_config()
  self.presence_data = FS.load_presence()
  self.settings_file = FS.settings_file_path
  self.presence = None

  self.check_client_id_stop_event = Event()
  self.update_presence_stop_event = Event()
  self.connect_presence_event = Event()
  
  self.check_client_id_thread = Thread(target=self.check_client_id, name='check_client_id', daemon=True)
  self.check_client_id_thread.start()

 def stop_all_threads(self):
  # stop all threads
  if hasattr(self, 'check_client_id_stop_event'):
    self.check_client_id_stop_event.set()
  if hasattr(self, 'update_presence_stop_event'):
    self.update_presence_stop_event.set()
  if hasattr(self, 'connect_presence_event'):
    self.connect_presence_event.set()
  if self.presence != None:
    try:
     self.presence.close()
    except:
     print("Presence is not connected.")

 def difference(self):
  if hasattr(self, 'old_presence_data'):
    new_presence_data = FS.load_presence()
    if new_presence_data == self.old_presence_data and new_presence_data['data'] == self.old_presence_data['data']:
     return False
    else: 
     self.old_presence_data = new_presence_data
     return True
  else:
   self.old_presence_data = FS.load_presence()
   return True

 def update_presence(self):
  while not self.update_presence_stop_event.is_set():
   is_difference = self.difference()
   if not self.old_presence_data['enabled']:
    logger.info('presence closed.')
    self.presence.close()
    self.presence = None
    self.connect_presence_event.clear()
    self.update_presence_stop_event.set()
    self.check_client_id_stop_event.clear()
    self.check_client_id_thread = None
    self.check_client_id_thread = Thread(target=self.check_client_id, name="check_client_id", daemon=True)
    self.check_client_id_thread.start()
    break

   if is_difference:
    time_data_diff = localtime()
    logger.info(f"presence updated - {time_data_diff.tm_hour}-{time_data_diff.tm_min}:{time_data_diff.tm_sec}")
    presence_data = {
      "activity_type": self.old_presence_data['data']['activity_type'],
      "large_image": self.old_presence_data['data']['large_image'],
      "small_image": self.old_presence_data['data']['small_image'],
      "instance": False
    }

    if self.old_presence_data['data']['large_image_text'] != "":
      presence_data['large_text'] = self.old_presence_data['data']['large_image_text']

    if self.old_presence_data['data']['small_image_text'] != "":
      presence_data['small_text'] = self.old_presence_data['data']['small_image_text']

    if self.old_presence_data['data']['state'] != "":
      presence_data['state'] = self.old_presence_data['data']['state']

    if self.old_presence_data['data']['details'] != "":
      presence_data['details'] = self.old_presence_data['data']['details']

    self.presence.update(**presence_data)

   self.update_presence_stop_event.wait(15)

 def connect(self):
  self.check_client_id_stop_event.set()
  self.config_data = FS.load_config()
  if hasattr(self, "presence") and self.presence == None:
   try:
    self.presence = Presence(self.config_data['client_id'])
   except:
    logger.error("failed presence init")

  attempt_amount = 0
  while not self.connect_presence_event.is_set():
   self.check_presence()
   if not self.presence_data['enabled']:
    self.connect_presence_event.set()
    self.update_presence_stop_event.set()
    self.check_client_id_stop_event.clear()
    self.check_client_id_thread = None
    self.check_client_id_thread = Thread(target=self.check_client_id, name="check_client_id", daemon=True)
    self.check_client_id_thread.start()
    break
  
   self.update_presence_stop_event.clear()
   try:
    self.presence.connect()
    logger.info("connection established")
    self.update_presence_thread = Thread(target=self.update_presence, name="update_presence_thread", daemon=True)
    self.update_presence_thread.start()
    self.connect_presence_event.set()
    continue
   except:
    if attempt_amount == 4:
     logger.error("failed connection, 4 attempts have been made and failed. Stopping Presence manager.")
     self.connect_presence_event.set()
     self.update_presence_stop_event.set()
     self.check_client_id_stop_event.clear()
     self.check_client_id_thread = None
     self.check_client_id_thread = Thread(target=self.check_client_id, name="check_client_id", daemon=True)
     self.check_client_id_thread.start()
     continue

    logger.error(f"failed connection, retrying in 5 seconds. attempt: {attempt_amount}")
    attempt_amount += 1

   self.connect_presence_event.wait(5)

 def start_presence(self):
  if hasattr(self, 'update_presence_thread'):
   if self.update_presence_thread != None and self.update_presence_thread.is_alive():
    logger.info("thread already alive.")
    return
   
  logger.info("attempting connection...")
  try:
   self.connect()
  except:
   logger.error("connection failed...")
   self.check_client_id_stop_event.set()
   return

 def check_presence(self):
  self.presence_data = FS.load_presence()

 def check_client_id(self):
  self.check_presence()
  while not self.check_client_id_stop_event.is_set():
   try:
    if not self.presence_data['enabled']:
      self.check_client_id_stop_event.wait(10)
      self.check_presence()
      continue

    with open(self.settings_file, 'r') as configFile: 
     self.data = json.load(configFile)
     if self.data['client_id'] is not None and self.data['client_id'] != "":
       self.start_presence()
   except FileNotFoundError:
    FS.load_config()
    
   self.check_client_id_stop_event.wait(5)

class status_manager:
 def __init__(self):
  logger.info('starting status manager')

  self.check_token_stop_event = Event()
  self.update_status_stop_event = Event()

  self.settings_file = FS.settings_path()
  self.status_file = FS.status_path()
  self.headers = { "authorization": "" }

  self.status_lines = FS.load_status()
  self.cur_line = ""

  self.check_token_proc = Thread(target=self.check_token, name="check_token", daemon=True)
  self.check_token_proc.start()

 def stop_all_threads(self):
  if hasattr(self, 'check_token_stop_event'):
    self.check_token_stop_event.set()
  if hasattr(self, 'update_status_stop_event'):
    self.update_status_stop_event.set()

 def is_enabled(self):
  return FS.load_status()['enabled']

 def update_status(self):
  while not self.update_status_stop_event.is_set():
    self.check_status()
    if not self.status_lines['enabled']:
      print('status has been disabled. returning back to check_token')
      self.check_token_stop_event.clear()
      self.check_token_proc = None
      self.check_token_proc = Thread(target=self.check_token, name="check_token", daemon=True)
      self.check_token_proc.start()
      self.update_status_stop_event.set()
      continue
    
    if self.status_lines['statuses'] == []:
      self.update_status_stop_event.wait(self.data['time_cycle'])
      continue

    for status_line in self.status_lines['statuses']:
      if not self.is_enabled():
       break

      if self.update_status_stop_event.is_set():
        break

      jsonData = {
        "custom_status": { "text": status_line['msg'] }
      }

      if status_line['emoji_name'] != "" and status_line['emoji_id'] != "":
        jsonData['custom_status'].update({ "emoji_name": status_line['emoji_name'], "emoji_id": status_line['emoji_id'] })

      self.cur_line = status_line['msg']

      try:
        resp = patch('https://discord.com/api/v10/users/@me/settings', headers=self.headers, json=jsonData)
        if resp.status_code == 401:
          return
      except Exception as e:
        logger.error(f"Error updating status: {e}")
        continue

      self.update_status_stop_event.wait(self.data['time_cycle'])

 def start_update_status(self):
  self.update_status_stop_event.clear()

  if "update_status" in enum_threads():
   if self.update_status_proc and self.update_status_proc.is_alive():
    return

  if not self.token:
   return

  self.update_status_proc = Thread(target=self.update_status, name="update_status", daemon=True)
  self.update_status_proc.start()

  self.check_token_stop_event.set()

 def remove_status(self, root, widget):
  option = widget.get()
  if not option:
   CTkMessagebox(title="Error", message="Please select a status line to remove.", icon="cancel")
   return
  
  for status in self.status_lines['statuses']:
   if status['msg'] == option:
    self.status_lines['statuses'].remove(status)
    with open(self.status_file, 'w') as status_file:
     json.dump(self.status_lines, status_file, indent=1)
    
    CTkMessagebox(title="Success", message="Status line removed successfully.", icon="check")

  self.check_status()
  root.after(0, lambda: widget.configure(values=[status['msg'] for status in self.status_lines['statuses']]))
  widget.set('')

 def add_status(self, root, widget, msg, emojiID, emojiName):
  if not msg.get():
    CTkMessagebox(title="Error", message="Please fill the message field.", icon="cancel")
    return
  
  if (emojiName.get() == "" and emojiID.get() != "") or (emojiName.get() != "" and emojiID.get() == ""):
    CTkMessagebox(title="Error", message="Please fill both emoji fields or leave both empty.", icon="cancel")
    return
  
  new_status = {
   "msg": msg.get(),
   "emoji_id": emojiID.get(),
   "emoji_name": emojiName.get()
  }

  self.status_lines['statuses'].append(new_status)
  with open(self.status_file, 'w') as status_file:
   json.dump(self.status_lines, status_file, indent=1)

  CTkMessagebox(title="Success", message="Status line added successfully.", icon="check")

  self.check_status()
  root.after(0, lambda: widget.configure(values=[status['msg'] for status in self.status_lines['statuses']]))

 def check_token(self):
  found_token = False
  
  while not found_token and not self.check_token_stop_event.is_set():
   try:
    if not self.status_lines['enabled']:
      self.check_token_stop_event.wait(10)
      self.check_status()
      continue

    with open(self.settings_file, 'r') as config_file: 
     self.data = json.load(config_file)
     if self.data['client_token'] is not None and self.data['client_token'] != "":
       found_token = True
       self.token = self.data['client_token']
       self.headers["authorization"] = self.token
       self.start_update_status()
   except FileNotFoundError:
    FS.load_config()
    
   self.check_token_stop_event.wait(5)

 def check_status(self):
  self.status_lines = json.load(open(self.status_file, 'r'))

if __name__ == "__main__":
 app = App()
 try:
  app.root.mainloop()
 except KeyboardInterrupt:
  app.root.destroy()
 except Exception as e:
  logger.error(e)
  app.root.destroy()
